---
- name: Find all the ZooKeeper machines
  register: zk_machines
  ec2_remote_facts:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    filters:
      instance-state-name: running
      dns_name: "{{ item }}"
  with_items: "{{ groups['zookeeper'] }}"
  run_once: yes
  delegate_to: localhost

- name: Bind the ZooKeeper private IPs
  set_fact:
    zk_addresses: "{{ zk_machines['results'] | map(attribute='instances') | list | private_addresses }}"

- name: Export a ZooKeeper connection string for downstream use
  set_fact:
    zk_conn_str: "{{ (zk_addresses | join(':' ~ zookeeper_client_host_port ~ ',')) }}"

- name: Run the Onyx container
  docker:
    name: "{{ onyx_container_name }}"
    image: "{{ onyx_docker_image }}"
    detach: yes
    state: reloaded
    restart_policy: always
    restart_policy_retry: 128
    privileged: yes
    ports:
      - "{{ peer_host_port }}:{{ peer_container_port }}"
    expose:
      - "{{ peer_container_port }}"
    env:
      NPEERS: "{{ onyx_n_peers }}"
      ONYX_ID: "{{ onyx_tenancy_id }}"
      BIND_ADDR: "{{ private_ip }}"
      PEER_PORT: "{{ peer_host_port }}"
      PEER_JAVA_OPTS: "{{ peer_java_opts }}"
      ZK_CONN_STR: "{{ zk_conn_str }}"

- name: Wait for Onyx Peer to come up
  wait_for:
    host: "{{ inventory_hostname }}"
    port: "{{ peer_host_port }}"
    delay: 0
    timeout: 60
  delegate_to: "{{ item }}"
  with_items:
    - "{{ inventory_hostname }}"
